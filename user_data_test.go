package mpq

import (
	"bytes"
	"testing"
)

func TestUserData(t *testing.T) {
	setup()

	if m.UserData.MaxSize != 512 {
		t.Errorf("Incorrect Value for MaxSize: %d", m.UserData.MaxSize)
	}
	if m.UserData.HeaderOffset != 1024 {
		t.Errorf("Incorrect Value for HeaderOffset: %d", m.UserData.HeaderOffset)
	}
	if m.UserData.UserDataHeaderSize != 97 {
		t.Errorf("Incorrect Value for UserDataHeaderSize: %d", m.UserData.UserDataHeaderSize)
	}

	userData := []byte{
		0x05, 0x0E, 0x00, 0x02, 0x3A, 0x48, 0x65, 0x72, 0x6F, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x74,
		0x68, 0x65, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x6D, 0x20, 0x72, 0x65, 0x70, 0x6C, 0x61, 0x79, 0x1B,
		0x31, 0x31, 0x02, 0x05, 0x0C, 0x00, 0x09, 0x02, 0x02, 0x09, 0x00, 0x04, 0x09, 0x0E, 0x06, 0x09,
		0x04, 0x08, 0x09, 0x92, 0x89, 0x04, 0x0A, 0x09, 0x92, 0x89, 0x04, 0x04, 0x09, 0x04, 0x06, 0x09,
		0xB8, 0xD7, 0x02, 0x08, 0x06, 0x00, 0x0A, 0x05, 0x02, 0x02, 0x02, 0x20, 0x54, 0x82, 0x5A, 0xE1,
		0x9E, 0x9C, 0xA9, 0xA0, 0x8A, 0x25, 0xDD, 0xA5, 0x95, 0xA5, 0xA8, 0xAE, 0x0C, 0x09, 0x92, 0x89,
		0x04,
	}

	if bytes.Compare(userData, m.UserData.Data[:len(userData)]) != 0 {
		t.Error("User data contains wrong value.")
	}
	for i := len(userData); i < m.UserData.MaxSize; i++ {
		if m.UserData.Data[i] != 0 {
			t.Error("Expected the rest of user data to be blank.")
		}
	}
}
